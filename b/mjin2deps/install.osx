#!/bin/bash
#
# This script builds and installs MJIN2 dependencies for OS X 10.8.
#

SRC_DIR=$1
BUILD_DIR=$2
if [ -z $SRC_DIR ] || [ -z $BUILD_DIR ]; then
    echo "Usage: $0 SRC_DIR BUILD_DIR"
    exit
fi
DARWIN_DIR=`dirname ~/Darwin`/Darwin
SDK_VERSION=macosx10.7
CWD=`pwd`
# Script absolute location.
DIR=`dirname $0`
# Versions.
ALURE_VERSION=1.2
CMAKE_VERSION=2.8.10.2
LIBSNDFILE_VERSION=1.0.25
OSG_VERSION=13363
PCRE_VERSION=8.32
SWIG_VERSION=2.0.9

# Make target directory for dependencies.
mkdir -p $DARWIN_DIR
PATH=$PATH:$DARWIN_DIR/bin

# CMake.
cd $CWD
CMAKE=$BUILD_DIR/cmake
if [ ! -d $CMAKE ]; then
    echo "CMake is not found. Building it."
    mkdir -p $CMAKE
    tar -xf $SRC_DIR/cmake-${CMAKE_VERSION}-Darwin64-universal.tar.gz -C $CMAKE
    cp -R $CMAKE/cmake-${CMAKE_VERSION}-Darwin64-universal/CMake*/Contents/* $DARWIN_DIR
else
    echo "CMake was found in '$CMAKE'. Skipping."
fi

# PCRE.
cd $CWD
PCRE=$BUILD_DIR/pcre
if [ ! -d $PCRE ]; then
    echo "PCRE is not found. Building it."
    mkdir -p $PCRE/{src,build}
    tar -xf $SRC_DIR/pcre-$PCRE_VERSION.tar.bz2 -C $PCRE/src
    cd $PCRE/build
    cmake -G "Xcode"                           \
          -DCMAKE_INSTALL_PREFIX=$DARWIN_DIR     \
          -DBUILD_SHARED_LIBS=ON               \
          -DPCRE_BUILD_PCRECPP=OFF             \
          -DPCRE_BUILD_PCREGREP=OFF            \
          -DPCRE_BUILD_TESTS=OFF               \
          -DPCRE_SUPPORT_UNICODE_PROPERTIES=ON \
          -DPCRE_SUPPORT_UTF8=ON               \
          ../src/pcre-$PCRE_VERSION
    xcodebuild -target install -configuration Release -sdk $SDK_VERSION
else
    echo "PCRE was found in '$PCRE'. Skipping."
fi

# SWIG.
cd $CWD
SWIG=$BUILD_DIR/swig
if [ ! -d $SWIG ]; then
    echo "SWIG is not found. Building it."
    mkdir -p $SWIG
    tar -xf $SRC_DIR/swig-$SWIG_VERSION.tar.gz -C $SWIG
    cd $SWIG/swig-$SWIG_VERSION
    ./configure --without-pcre --prefix=$DARWIN_DIR
    make
    make install
else
    echo "SWIG was found in '$SWIG'. Skipping."
fi

# OpenSceneGraph.
cd $CWD
OSG=$BUILD_DIR/osg
if [ ! -d $OSG ]; then
    echo "OpenSceneGraph is not found. Building it."
    mkdir -p $OSG/{src,build}
    tar -xf $SRC_DIR/osg-$OSG_VERSION.tar.bz2 -C $OSG/src
    cp $DIR/osgmass.patch $OSG/src
    # Patch.
    cd $OSG/src/osg-$OSG_VERSION
    # Don't compile examples.
    patch -p0 < ../osgmass.patch
    cd $OSG/build
    cmake -G "Xcode"                       \
          -DBUILD_OSG_APPLICATIONS=OFF     \
          -DCMAKE_BUILD_TYPE="Release"     \
          -DCMAKE_INSTALL_PREFIX=$DARWIN_DIR \
          ../src/osg-$OSG_VERSION
    xcodebuild -target install -configuration Release -sdk $SDK_VERSION
else
    echo "OpenSceneGraph was found in '$OSG'. Skipping."
fi

# libsndfile.
cd $CWD
LIBSNDFILE=$BUILD_DIR/libsndfile
if [ ! -d $LIBSNDFILE ]; then
    echo "libsndfile is not found. Building it."
    mkdir -p $LIBSNDFILE
    tar -xf $SRC_DIR/libsndfile-$LIBSNDFILE_VERSION.tar.gz -C $LIBSNDFILE
    cp $DIR/libsndfile.patch $LIBSNDFILE
    cd $LIBSNDFILE/libsndfile-$LIBSNDFILE_VERSION
    # Patch.
    # Don't compile programs.
    patch -p0 < ../libsndfile.patch
    ./configure --disable-static --prefix=$DARWIN_DIR
    make
    make install
else
    echo "libsndfile was found in '$LIBSNDFILE'. Skipping."
fi

# ALURE.
cd $CWD
ALURE=$BUILD_DIR/alure
if [ ! -d $ALURE ]; then
    echo "ALURE is not found. Building it."
    mkdir -p $ALURE/{build,src}
    tar -xf $SRC_DIR/alure-$ALURE_VERSION.tar.bz2 -C $ALURE/src
    cd $ALURE/build
    cmake -G "Xcode"                       \
          -DBUILD_STATIC=OFF               \
          -DCMAKE_BUILD_TYPE="Release"     \
          -DCMAKE_INSTALL_PREFIX=$DARWIN_DIR \
          ../src/alure-$ALURE_VERSION
    xcodebuild -target install -configuration Release -sdk $SDK_VERSION
    ln -s $DARWIN_DIR/include/{Open,}AL
else
    echo "ALURE was found in '$ALURE'. Skipping."
fi

